[{"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\index.js":"1","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\App.js":"2","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\utilities\\axios.js":"3","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\Header.js":"4","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\Footer.js":"5","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\errors\\NotFound404.js":"6","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\errors\\Forbidden403.js":"7","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\students\\StudentsList.js":"8","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\Home.js":"9","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\routes\\ProtectedRoute.js":"10","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\context\\AuthContextProvider.js":"11","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\students\\StudentView.js":"12","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\students\\StudentEdit.js":"13","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\students\\StudentCard.js":"14","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\Login.js":"15","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectsList.js":"16","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectCard.js":"17","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\Project.js":"18","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectView.js":"19","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectUpdate.js":"20","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectCreate.js":"21","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\notifications\\ProjectRequestsList.js":"22","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\notifications\\ProjectRequestCard.js":"23","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectMemberDiscussion.js":"24","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectPublicDiscussion.js":"25","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectMessageList.js":"26","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectMessageForm.js":"27"},{"size":479,"mtime":1620391869182,"results":"28","hashOfConfig":"29"},{"size":3632,"mtime":1620327837480,"results":"30","hashOfConfig":"29"},{"size":4520,"mtime":1619641976173,"results":"31","hashOfConfig":"29"},{"size":13440,"mtime":1620328612581,"results":"32","hashOfConfig":"29"},{"size":879,"mtime":1613817447539,"results":"33","hashOfConfig":"29"},{"size":985,"mtime":1620543381009,"results":"34","hashOfConfig":"29"},{"size":988,"mtime":1620543368621,"results":"35","hashOfConfig":"29"},{"size":3058,"mtime":1619642336632,"results":"36","hashOfConfig":"29"},{"size":1629,"mtime":1619643051488,"results":"37","hashOfConfig":"29"},{"size":822,"mtime":1613547532338,"results":"38","hashOfConfig":"29"},{"size":2614,"mtime":1619642914235,"results":"39","hashOfConfig":"29"},{"size":15155,"mtime":1619645259935,"results":"40","hashOfConfig":"29"},{"size":14249,"mtime":1619642440782,"results":"41","hashOfConfig":"29"},{"size":3465,"mtime":1617031923425,"results":"42","hashOfConfig":"29"},{"size":6991,"mtime":1620545302813,"results":"43","hashOfConfig":"29"},{"size":3450,"mtime":1619642710942,"results":"44","hashOfConfig":"29"},{"size":3711,"mtime":1617521335703,"results":"45","hashOfConfig":"29"},{"size":10157,"mtime":1620710932788,"results":"46","hashOfConfig":"29"},{"size":23200,"mtime":1620712216955,"results":"47","hashOfConfig":"29"},{"size":15467,"mtime":1619642776744,"results":"48","hashOfConfig":"29"},{"size":14414,"mtime":1619642642920,"results":"49","hashOfConfig":"29"},{"size":5609,"mtime":1620111588228,"results":"50","hashOfConfig":"29"},{"size":6545,"mtime":1619370327006,"results":"51","hashOfConfig":"29"},{"size":2850,"mtime":1619642658565,"results":"52","hashOfConfig":"29"},{"size":2845,"mtime":1619642695039,"results":"53","hashOfConfig":"29"},{"size":2972,"mtime":1619128667178,"results":"54","hashOfConfig":"29"},{"size":2817,"mtime":1619128742233,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"11bzn11",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\index.js",[],["119","120"],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\App.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\utilities\\axios.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\Header.js",["121"],"import React, { useState, useContext } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n/** my components */\r\nimport { AuthContext } from './context/AuthContextProvider';\r\n/** Material UI Imports */\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n\r\n/**\r\n * \r\n * These styles are a modification of https://material-ui.com/components/app-bar/#app-bar-with-a-primary-search-field last accessed 06/05/21\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  homeButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '20ch',\r\n    },\r\n  },\r\n  sectionDesktop: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  headerToolbar: {\r\n      paddingLeft: 0,\r\n      paddingRight: 0,\r\n  },\r\n}));\r\n\r\n/**\r\n * \r\n * The Header component is a modification of https://material-ui.com/components/app-bar/#app-bar-with-a-primary-search-field last accessed 06/05/21\r\n */\r\nconst Header = (props) => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = useState(null);\r\n\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [projectSearchValue, setProjectSearchValue] = useState('');\r\n  const [studentSearchValue, setStudentSearchValue] = useState('');\r\n\r\n  const handleProfileMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n\r\n  const handleMobileMenuOpen = (event) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClick = (url) => {\r\n    handleMobileMenuClose();\r\n    history.push(url);\r\n  };\r\n\r\n  const handleMenuClick = (url) => {\r\n    handleMenuClose();\r\n    history.push(url);\r\n  };\r\n\r\n  const handleLogOut = () => {\r\n    handleMenuClose();\r\n    authContext.logOut();\r\n  };\r\n\r\n  const menuId = 'primary-search-account-menu';\r\n  // profile menu\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      <MenuItem data-cy=\"profile-button\" onClick={() => handleMenuClick(`/students/${authContext.studentId}`)}>Profile</MenuItem>\r\n      <MenuItem data-cy=\"active-projects-button\" onClick={() => handleMenuClick(`/projects/active`)}>Active Projects</MenuItem>\r\n      <MenuItem data-cy=\"followed-projects-button\" onClick={() => handleMenuClick(`/projects/followed`)}>Followed Projects</MenuItem>\r\n      <MenuItem data-cy=\"logout-button\" onClick={handleLogOut}>Logout</MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const mobileMenuId = 'primary-search-account-menu-mobile';\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem onClick={() => handleMobileMenuClick('/projects/new')}>\r\n        <IconButton\r\n          aria-label=\"create project\"\r\n          data-cy=\"create-project-button-mobile\"\r\n          color=\"inherit\"\r\n        >\r\n          <PostAddIcon />\r\n        </IconButton>\r\n        <p>Create Project</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={() => handleMobileMenuClick('/projects')}>\r\n        <IconButton\r\n          aria-label=\"all projects\"\r\n          data-cy=\"projects-button-mobile\"\r\n          color=\"inherit\"\r\n        >\r\n          <AssignmentIcon />\r\n        </IconButton>\r\n        <p>Projects</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={() => handleMobileMenuClick('/students')}>\r\n        <IconButton\r\n            aria-label=\"find students\"\r\n            color=\"inherit\"\r\n            data-cy=\"students-button-mobile\"\r\n        >\r\n            <PeopleIcon />\r\n        </IconButton>\r\n        <p>Students</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={() => handleMobileMenuClick('/notifications')}>\r\n        <IconButton aria-label=\"show 0 new notifications\" color=\"inherit\">\r\n          <Badge badgeContent={0} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Notifications</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={handleProfileMenuOpen}>\r\n        <IconButton\r\n          aria-label=\"account of current student\"\r\n          aria-controls=\"primary-search-account-menu\"\r\n          aria-haspopup=\"true\"\r\n          data-cy=\"account-button-mobile\"\r\n          color=\"inherit\"\r\n        >\r\n          <AccountCircle />\r\n        </IconButton>\r\n        <p>Account</p>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  /** handles input field change for project search */\r\n  const handleProjectSearchOnChange = (event) => {\r\n    setProjectSearchValue(event.target.value);\r\n  }\r\n\r\n  /** handles submission of project search input field */\r\n  const handleProjectSearchSubmission = (event) => {\r\n    event.preventDefault();\r\n    document.getElementById('project-search').reset();\r\n\r\n    history.push({\r\n      pathname: `/projects`,\r\n      search: `?search=${projectSearchValue}`,\r\n    });\r\n  }\r\n\r\n  /** handles input field change for student search */\r\n  const handleStudentSearchOnChange = (event) => {\r\n    setStudentSearchValue(event.target.value);\r\n  }\r\n\r\n  /** handles submission of student search input field */\r\n  const handleStudentSearchSubmission = (event) => {\r\n    event.preventDefault();\r\n    document.getElementById('student-search').reset();\r\n\r\n    history.push({\r\n      pathname: `/students`,\r\n      search: `?search=${studentSearchValue}`,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"fixed\">\r\n          <Container>\r\n            <Toolbar className={classes.headerToolbar}>\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    className={classes.homeButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"go to home page\"\r\n                    data-cy=\"home-button\"\r\n                    onClick={() => history.push('/')}\r\n                >\r\n                    <HomeIcon />\r\n                </IconButton>\r\n                <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                    SPTB\r\n                </Typography>\r\n                {authContext.isAuthenticated && (\r\n                  <>\r\n                    <form id=\"project-search\" onSubmit={handleProjectSearchSubmission}>\r\n                      <div className={classes.search}>\r\n                          <div className={classes.searchIcon}>\r\n                            <SearchIcon />\r\n                          </div>\r\n                          <InputBase\r\n                            placeholder=\"Projects by role\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            onChange={handleProjectSearchOnChange}\r\n                            data-cy=\"project-search\"\r\n                          />\r\n                      </div>\r\n                    </form>\r\n                    <form id=\"student-search\" onSubmit={handleStudentSearchSubmission}>\r\n                      <div className={classes.search}>\r\n                          <div className={classes.searchIcon}>\r\n                            <SearchIcon />\r\n                          </div>\r\n                          <InputBase\r\n                            placeholder=\"Students by role\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            onChange={handleStudentSearchOnChange}\r\n                            data-cy=\"student-search\"\r\n                          />\r\n                      </div>\r\n                    </form>\r\n                    <div className={classes.grow} />\r\n                    <div className={classes.sectionDesktop}>\r\n                      <IconButton\r\n                        aria-label=\"create project\"\r\n                        data-cy=\"create-project-button\"\r\n                        color=\"inherit\"\r\n                        onClick={() => history.push('/projects/new')}\r\n                      >\r\n                        <PostAddIcon />\r\n                      </IconButton>\r\n                      <IconButton\r\n                        aria-label=\"all projects\"\r\n                        data-cy=\"projects-button\"\r\n                        color=\"inherit\"\r\n                        onClick={() => history.push('/projects')}\r\n                      >\r\n                        <AssignmentIcon />\r\n                      </IconButton>\r\n                      <IconButton\r\n                          aria-label=\"find students\"\r\n                          data-cy=\"students-button\"\r\n                          color=\"inherit\"\r\n                          onClick={() => history.push('/students')}\r\n                      >\r\n                        <PeopleIcon />\r\n                      </IconButton>\r\n                      <IconButton\r\n                        aria-label=\"show 0 new notifications\"\r\n                        data-cy=\"notifications-button\"\r\n                        color=\"inherit\"\r\n                        onClick={() => history.push('/notifications')}\r\n                      >\r\n                        <Badge badgeContent={0} color=\"secondary\">\r\n                          <NotificationsIcon />\r\n                        </Badge>\r\n                      </IconButton>\r\n                      <IconButton\r\n                        edge=\"end\"\r\n                        aria-label=\"account of current student\"\r\n                        aria-controls={menuId}\r\n                        aria-haspopup=\"true\"\r\n                        data-cy=\"account-button\"\r\n                        onClick={handleProfileMenuOpen}\r\n                        color=\"inherit\"\r\n                      >\r\n                        <AccountCircle />\r\n                      </IconButton>\r\n                    </div>\r\n                    <div className={classes.sectionMobile}>\r\n                      <IconButton\r\n                        aria-label=\"show more\"\r\n                        aria-controls={mobileMenuId}\r\n                        aria-haspopup=\"true\"\r\n                        data-cy=\"mobile-more-button\"\r\n                        onClick={handleMobileMenuOpen}\r\n                        color=\"inherit\"\r\n                      >\r\n                        <MoreIcon />\r\n                      </IconButton>\r\n                    </div>\r\n                  </>\r\n                )}\r\n            </Toolbar>\r\n        </Container>\r\n      </AppBar>\r\n      {authContext.isAuthenticated && (\r\n          <>\r\n            {renderMobileMenu}\r\n            {renderMenu}\r\n          </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\Footer.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\errors\\NotFound404.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\errors\\Forbidden403.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\students\\StudentsList.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\Home.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\routes\\ProtectedRoute.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\context\\AuthContextProvider.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\students\\StudentView.js",["122"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport { useParams, useHistory, useLocation } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n/** my components */\r\nimport { AuthContext } from '../context/AuthContextProvider';\r\n/** my utilities */\r\nimport { axiosInstance } from '../../utilities/axios';\r\n/** Images */\r\nimport defaultProfileImage from '../../assets/images/default-profile-image.png';\r\n/** Material UI Imports */\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { MenuItem } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\n\r\n\r\n/** custom styles for this component */\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    card: {\r\n        padding: 20,\r\n    },\r\n    profileImage: {\r\n        maxWidth: 300,\r\n        maxHeight: 300,\r\n    },\r\n    profileItem: {\r\n        marginBottom: 15,\r\n    },\r\n    cardAction: {\r\n        paddingTop: 26,\r\n        paddingBottom: 16,\r\n    },\r\n    fieldErrorAlert: {\r\n        textAlign: \"center\",\r\n        marginTop: 10,\r\n        color: '#f44336',\r\n    },\r\n}));\r\n\r\n\r\n/** Project invitation validation schema. */\r\nconst projectInvitationValidationSchema = Yup.object().shape({\r\n    project: Yup.string()\r\n        .required('You must select a project'),\r\n    project_role: Yup.string()\r\n        .max(40, 'This field must not contain more than 40 characters'),\r\n});\r\n\r\n\r\n/** Renders a detailed view of a student profile with a given ID. */\r\nconst StudentView = (props) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [student, setStudent] = useState({});\r\n    const [isAuthenticatedStudent, setIsAuthenticatedStudent] = useState(false);\r\n\r\n    const [projectInvitationDialogIsOpen, setProjectInvitationDialogIsOpen] = useState(false);\r\n    const [authStudentProjects, setAuthStudentProjects] = useState([]);\r\n\r\n    const authContext = useContext(AuthContext);\r\n    const { id } = useParams();  // we don't know if a student with this ID exists in the database\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n\r\n    /**\r\n     * Fetch and store a student's profile.\r\n     * Redirects to a 404 page if the user doesn't exist.\r\n     */\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        axiosInstance\r\n            .get(`api/accounts/${id}/`)\r\n            .then(response => {\r\n                setIsLoading(false);\r\n                setStudent(response.data);\r\n\r\n                // the authenticated student is looking at their own profile\r\n                if (response.data.id === authContext.studentId) {\r\n                    setIsAuthenticatedStudent(true);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                setIsLoading(false);\r\n                console.log(error);\r\n                \r\n                if (error.response.status === 404) {\r\n                    history.push(`${location.pathname}/page-not-found`);\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    /** handle edit profile button click */\r\n    const handleEditProfile = () => history.push(`/students/${authContext.studentId}/edit`);\r\n\r\n    /** Opens invitation dialog and fetches the auth student's owned projects. */\r\n    const handleOpenProjectInvitationDialog = () => {\r\n        setProjectInvitationDialogIsOpen(true);\r\n\r\n        // get the authenticated student's owned projects\r\n        axiosInstance\r\n            .get('api/projects?relation=owned')\r\n            .then(response => {\r\n                setAuthStudentProjects(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    const handleCloseProjectInvitationDialog = () => {\r\n        setProjectInvitationDialogIsOpen(false);\r\n    };\r\n\r\n    /**\r\n     * Handles invitation submission.\r\n     * Updates error messages when a code 400 is returned by the server.\r\n     */\r\n    const handleSendInvitation = async (values, actions) => {\r\n        axiosInstance\r\n        .post(`api/requests/`, {\r\n            \"requestee\": student.id,\r\n            \"project\": values.project,\r\n            \"role\": values.project_role\r\n        })\r\n        .then(response => {\r\n            handleCloseProjectInvitationDialog();\r\n        })\r\n        .catch(error => {\r\n            if (error.response.status === 400) {\r\n                actions.setFieldError('project', error.response.data.project);\r\n                actions.setFieldError('project_role', error.response.data.role);\r\n                actions.setFieldError('all', error.response.data.non_field_errors);\r\n            } else {\r\n                console.log(error);\r\n            }\r\n        });\r\n    };\r\n\r\n    /** Returns a dialog with a form to send the student an invitation to join a project. */\r\n    const getProjectInvitationDialog = () => {\r\n        return (\r\n            <Dialog open={projectInvitationDialogIsOpen} onClose={handleCloseProjectInvitationDialog} fullWidth>\r\n                <Formik\r\n                    initialValues={{\r\n                        project_role: '',\r\n                        project: '',\r\n                    }}\r\n                    validationSchema={projectInvitationValidationSchema}\r\n                    onSubmit={handleSendInvitation}\r\n                >\r\n                    {({values, handleBlur, handleChange, isSubmitting, handleSubmit, touched, errors}) => (\r\n                        <form noValidate>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    Send the student an invitation to join your project team.\r\n                                </DialogContentText>\r\n                                <TextField\r\n                                    required\r\n                                    label=\"Their Role\"\r\n                                    name=\"project_role\"\r\n                                    data-cy=\"project_role\"\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    value={values.project_role}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    error={touched.project_role && Boolean(errors.project_role)}\r\n                                    helperText={touched.project_role && errors.project_role}\r\n                                />\r\n                                <TextField\r\n                                    select\r\n                                    required\r\n                                    label=\"Project\"\r\n                                    name=\"project\"\r\n                                    data-cy=\"project\"\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    value={values.project}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    error={touched.project && Boolean(errors.project)}\r\n                                    helperText={touched.project && errors.project}\r\n                                >\r\n                                    {authStudentProjects.map(project => (\r\n                                        <MenuItem key={project.id} value={project.id} data-cy={project.id}>\r\n                                            {project.title}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                                <div>\r\n                                    {\r\n                                        errors['all'] &&\r\n                                        (<Typography component=\"p\" variant=\"body2\" className={classes.fieldErrorAlert}>\r\n                                            {errors['all']}\r\n                                        </Typography>)\r\n                                    }\r\n                                </div>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleCloseProjectInvitationDialog} data-cy=\"cancel-invitation-button\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button onClick={handleSubmit} color=\"primary\" type=\"submit\" data-cy=\"send-invitation-button\" disabled={isSubmitting}>\r\n                                    Send\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Dialog>\r\n        )\r\n    };\r\n\r\n    /** Returns a student profile as a card element if there is one stored. */\r\n    const getStudentProfile = () => {\r\n        if (Object.keys(student).length > 0) {\r\n            return (\r\n                <Card className={classes.card}>\r\n                    <CardContent>\r\n                    <Grid container direction=\"row\" spacing={2} justify=\"flex-start\" alignItems=\"flex-start\">\r\n                        <Grid item>\r\n                            <CardMedia\r\n                                component=\"img\"\r\n                                alt=\"Default Profile\"\r\n                                image={defaultProfileImage}\r\n                                title=\"Default Profile\"\r\n                                className={classes.profileImage}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"h3\" component=\"h1\" data-cy=\"full-name\" gutterBottom>\r\n                                {student.first_name && student.last_name && `${student.first_name} ${student.last_name}`}\r\n                            </Typography>\r\n                            <div className={classes.profileItem}>\r\n                                <Typography variant=\"h6\" component=\"h3\" color=\"primary\" data-cy=\"username-label\">\r\n                                    Username\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" component=\"p\" data-cy=\"username\">\r\n                                    {student.username}\r\n                                </Typography>\r\n                            </div>\r\n                            <div className={classes.profileItem}>\r\n                                <Typography variant=\"h6\" component=\"h3\" color=\"primary\">\r\n                                    Email\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" component=\"p\" data-cy=\"email\">\r\n                                    {student.email}\r\n                                </Typography>\r\n                            </div>\r\n                            <div className={classes.profileItem}>\r\n                                <Typography variant=\"h6\" component=\"h3\" color=\"primary\">\r\n                                    Programme\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" component=\"p\" data-cy=\"programme\">\r\n                                    {student.profile.programme}\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                            About\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" component=\"p\" data-cy=\"about\">\r\n                            {student.profile.about}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                            Roles\r\n                        </Typography>\r\n                        <Grid container direction=\"row\" spacing={2}>\r\n                            {student.profile.roles.map((role, index) => {\r\n                                return (\r\n                                    <Grid item key={index}>\r\n                                        <Chip\r\n                                            size=\"medium\"\r\n                                            label={role}\r\n                                            data-cy={`role-${index}`}\r\n                                            color=\"primary\"\r\n                                            variant=\"outlined\"\r\n                                            avatar={<Avatar>R</Avatar>}\r\n                                        />\r\n                                    </Grid>\r\n                                )\r\n                            })}\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <CardActions className={classes.cardAction}>\r\n                        {\r\n                            isAuthenticatedStudent &&\r\n                            <Button size=\"medium\" variant=\"contained\" color=\"primary\" data-cy=\"edit-profile-button\" onClick={handleEditProfile}>Edit Profile</Button>\r\n                        }\r\n                        {\r\n                            isAuthenticatedStudent === false &&\r\n                            <>\r\n                                <Button size=\"medium\" variant=\"contained\" color=\"primary\" data-cy=\"request-join-project-button\" onClick={handleOpenProjectInvitationDialog}>Send Project Invitation</Button>\r\n                                {getProjectInvitationDialog()}\r\n                            </>\r\n                        }\r\n                    </CardActions>\r\n                </Card>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {getStudentProfile()}\r\n            <Backdrop className={classes.backdrop} open={isLoading}>\r\n                <CircularProgress color=\"secondary\" />\r\n            </Backdrop>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default StudentView;","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\students\\StudentEdit.js",["123"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport { useParams, useHistory, useLocation } from 'react-router-dom';\r\nimport { Formik, FieldArray, Field, getIn } from 'formik';\r\nimport * as Yup from 'yup';\r\n/** my components */\r\nimport { AuthContext } from '../context/AuthContextProvider';\r\nimport Forbidden403 from '../errors/Forbidden403';\r\n/** my utilities */\r\nimport { axiosInstance } from '../../utilities/axios';\r\n/** Material UI Imports */\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n/** custom styles for this component */\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    card: {\r\n        padding: 20,\r\n    },\r\n    errorText: {\r\n        fontSize: '0.75rem',\r\n        lineHeight: '1.66',\r\n        color: '#f44336',\r\n    },\r\n    miniButton: {\r\n        marginTop: 5,\r\n        marginBottom: 10,\r\n    },\r\n    submitButton: {\r\n        marginTop: 10,\r\n        marginRight: 10,\r\n    },\r\n    cancelButton: {\r\n        marginTop: 10,\r\n    },\r\n}));\r\n\r\n/** Profile validation schema. */\r\nconst profileValidationSchema = Yup.object().shape({\r\n    programme: Yup.string()\r\n        .max(150, 'This field must not contain more than 150 characters'),\r\n    about: Yup.string()\r\n        .max(1000, 'This field must not contain more than 1000 characters'),\r\n    roles: Yup.array()\r\n        .of(Yup.string().max(40, 'This field must not contain more than 40 characters')),\r\n});\r\n\r\n\r\n/** Renders a form for editing a student's profile with a given ID. */\r\nconst StudentEdit = (props) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [studentProfile, setStudentProfile] = useState({});\r\n    const [isAuthenticatedStudent, setIsAuthenticatedStudent] = useState(false);\r\n\r\n    const authContext = useContext(AuthContext);\r\n    const classes = useStyles();\r\n    const { id } = useParams();  // we don't know if a student with this ID exists in the database\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    /**\r\n     * Fetch and store a student's modifiable profile elements.\r\n     * In addition, it stores whether the student profile belongs to the authenticated user.\r\n     * Redirects to a 404 page if the user doesn't exist.\r\n     */\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        axiosInstance\r\n            .get(`api/accounts/${id}/`)\r\n            .then(response => {\r\n                setIsLoading(false);\r\n                setStudentProfile(response.data.profile);  // only save the editable elements\r\n\r\n                // the authenticated student is looking at their own profile\r\n                if (response.data.id === authContext.studentId) {\r\n                    setIsAuthenticatedStudent(true);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                setIsLoading(false);\r\n                console.log(error);\r\n                \r\n                if (error.response.status === 404) {\r\n                    history.push(`${location.pathname}/page-not-found`);\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    /**\r\n     * Handles the submission for updating a student's profile.\r\n     * Redirects to the student profile view page on success.\r\n     * Updates error messages on fields if a 400 code is returned.\r\n     */\r\n    const handleProfileUpdate = async (values, actions) => {\r\n        axiosInstance\r\n            .patch(`api/accounts/${id}/`, {\r\n                profile: {\r\n                    programme: values.programme,\r\n                    about: values.about,\r\n                    roles: values.roles\r\n                }\r\n            })\r\n            .then(response => {\r\n                console.log('Profile updated');\r\n                console.log(response.data);\r\n                history.push(`/students/${id}`);  // go back to the profile view page\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 400) {\r\n                    const profile = error.response.data.profile;\r\n                    actions.setFieldError('programme', profile.programme);\r\n                    actions.setFieldError('about', profile.about);\r\n\r\n                    if (profile.roles) {\r\n                        for (const [key, value] of Object.entries(profile.roles)) {\r\n                            actions.setFieldError(`roles.${key}`, value);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    };\r\n\r\n    /** Redirects to the student profile view page  */\r\n    const handleCancelProfileUpdate = () => history.push(`/students/${id}`);\r\n\r\n    /**\r\n     * Custom error message for fields for use in array fields\r\n     * This code is taken from https://formik.org/docs/api/fieldarray#fieldarray-validation-gotchas\r\n     */\r\n    const ErrorMessage = ({ name }) => (\r\n        <Field name={name}>\r\n            {({ form }) => {\r\n                const error = getIn(form.errors, name);\r\n                const touch = getIn(form.touched, name);\r\n\r\n                return touch && error ? <p className={classes.errorText}>{error}</p> : null;\r\n            }}\r\n        </Field>\r\n    )\r\n\r\n    /**\r\n     * Returns form for editing a student's profile.\r\n     * Code for FieldArray is based on https://formik.org/docs/examples/field-arrays\r\n     */\r\n    const getStudentProfileForm = () => {\r\n        if (Object.keys(studentProfile).length > 0) {\r\n            return (\r\n                <Formik\r\n                    initialValues={{\r\n                        programme: studentProfile.programme,\r\n                        about: studentProfile.about,\r\n                        roles: [...studentProfile.roles],\r\n                    }}\r\n                    validationSchema={profileValidationSchema}\r\n                    onSubmit={handleProfileUpdate}\r\n                >\r\n                    {({ values, handleBlur, handleChange, isSubmitting, handleSubmit, touched, errors }) => (\r\n                        <form className={classes.form} noValidate>\r\n                            <TextField\r\n                                label=\"Programme\"\r\n                                type=\"text\"\r\n                                variant=\"outlined\"\r\n                                className={classes.textInputField}\r\n                                data-cy=\"programme\"\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                                name=\"programme\"\r\n                                id=\"programme\"\r\n                                value={values.programme}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                error={touched.programme && Boolean(errors.programme)}\r\n                                helperText={touched.programme && errors.programme}\r\n                            />\r\n                            <TextField\r\n                                multiline\r\n                                rows={7}\r\n                                label=\"About\"\r\n                                type=\"text\"\r\n                                variant=\"outlined\"\r\n                                className={classes.textAreaField}\r\n                                data-cy=\"about\"\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                                name=\"about\"\r\n                                id=\"about\"\r\n                                value={values.about}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                error={touched.about && Boolean(errors.about)}\r\n                                helperText={touched.about && errors.about}\r\n                            />\r\n                            <FieldArray name=\"roles\">\r\n                                {({ form, remove, push }) => (\r\n                                    <div>\r\n                                        {\r\n                                            values.roles.length > 0 &&\r\n                                            values.roles.map((role, index) => (\r\n                                                <div key={index}>\r\n                                                    <div>\r\n                                                        <TextField\r\n                                                            type=\"text\"\r\n                                                            label={`Role ${index + 1}`}\r\n                                                            data-cy={`role-${index}`}\r\n                                                            name={`roles.${index}`}\r\n                                                            fullWidth\r\n                                                            margin=\"normal\"\r\n                                                            value={role}\r\n                                                            onChange={ form.handleChange }\r\n                                                            onBlur={form.handleBlur}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <ErrorMessage\r\n                                                            name={`roles.${index}`}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            className={classes.miniButton}\r\n                                                            data-cy={`remove-role-${index}-button`}\r\n                                                            color=\"secondary\"\r\n                                                            type=\"button\"\r\n                                                            size=\"small\"\r\n                                                            onClick={() => remove(index)}\r\n                                                        >\r\n                                                            Remove\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            ))\r\n                                        }\r\n                                        {\r\n                                            values.roles.length < 3 &&\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                className={classes.miniButton}\r\n                                                data-cy=\"add-role-button\"\r\n                                                color=\"secondary\"\r\n                                                type=\"button\"\r\n                                                size=\"small\"\r\n                                                onClick={() => push('')}\r\n                                            >\r\n                                                Add New Role\r\n                                            </Button>\r\n                                        }\r\n                                    </div>\r\n                                )}\r\n                            </FieldArray>\r\n                            <div>\r\n                                {errors['all'] &&\r\n                                (<Typography component=\"p\" variant=\"body2\" className={classes.fieldErrorAlert}>\r\n                                    {errors['all']}\r\n                                </Typography>)}\r\n                            </div>\r\n\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                className={classes.submitButton}\r\n                                data-cy=\"update-profile-button\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                onClick={handleSubmit}\r\n                                disabled={isSubmitting}\r\n                            >\r\n                                Update\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                className={classes.cancelButton}\r\n                                data-cy=\"cancel-update-profile-button\"\r\n                                type=\"button\"\r\n                                onClick={handleCancelProfileUpdate}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isLoading ? null : \r\n                isAuthenticatedStudent ? (\r\n                    <Card className={classes.card}>\r\n                        <CardContent>\r\n                            <Typography variant=\"h3\" component=\"h1\" gutterBottom>\r\n                                Edit Profile\r\n                            </Typography>\r\n                            {getStudentProfileForm()}\r\n                        </CardContent>\r\n                    </Card>\r\n                ) : <Forbidden403 />\r\n            }\r\n            <Backdrop className={classes.backdrop} open={isLoading}>\r\n                <CircularProgress color=\"secondary\" />\r\n            </Backdrop>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default StudentEdit;","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\students\\StudentCard.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\Login.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectsList.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectCard.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\Project.js",["124","125","126","127","128","129","130","131","132","133","134","135","136","137"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport { useParams, useHistory, useLocation } from 'react-router-dom';\r\n/** my components */\r\nimport { AuthContext } from '../context/AuthContextProvider';\r\nimport ProjectView from './ProjectView';\r\nimport ProjectUpdate from './ProjectUpdate';\r\n/** my utilities */\r\nimport { axiosInstance } from '../../utilities/axios';\r\n/** Material UI Imports */\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\n/** custom styles for this component */\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n}));\r\n\r\n\r\n/** Base component for projects. Renders the project and the project edit form. */\r\nconst Project = (props) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    const [project, setProject] = useState(null);\r\n    const [members, setMembers] = useState([]);\r\n    const [followId, setFollowId] = useState();\r\n\r\n    // auth user relations with project\r\n    const [isOwner, setIsOwner] = useState(false);\r\n    const [isMember, setIsMember] = useState(false);\r\n    const [isFollower, setIsFollower] = useState(false);\r\n    const [hasActiveJoinRequest, setHasActiveJoinRequest] = useState(false);\r\n\r\n    // this is a string type\r\n    const { id } = useParams();  // we don't know if a project with this ID exists in the database\r\n    \r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n    const authContext = useContext(AuthContext);\r\n\r\n    /**\r\n     * Fetch and store project information.\r\n     * Redirects to a 404 page if the project doesn't exist.\r\n     */\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        axiosInstance\r\n            .get(`api/projects/${id}/`)\r\n            .then(response => {\r\n                setIsLoading(false);\r\n                setProject(response.data);\r\n\r\n                const members_list = [];\r\n\r\n                response.data.team_members.map((member, index) => {\r\n                    members_list[index] = {...member};\r\n                });\r\n                // store team members separately\r\n                setMembers(members_list);\r\n\r\n                // the authenticated student is the owner of this project\r\n                if (response.data.owner === authContext.studentId) {\r\n                    setIsOwner(true);\r\n                }\r\n\r\n                response.data.team_members.map(team_member => {\r\n                    if (team_member.user === authContext.studentId) {\r\n                        setIsMember(true);\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                setIsLoading(false);\r\n                console.log(error);\r\n                \r\n                if (error.response.status === 404) {\r\n                    history.push(`${location.pathname}/page-not-found`);\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    /**\r\n     * Fetch the authenticated student's active requests and update HasActiveJoinRequest\r\n     * if a request for this project exists\r\n     */\r\n     useEffect(() => {\r\n        setIsLoading(true);\r\n        axiosInstance\r\n            .get(`api/requests/`)\r\n            .then(response => {\r\n                setIsLoading(false);\r\n\r\n                response.data.map(request => {\r\n                    if (request.project == id) {\r\n                        setHasActiveJoinRequest(true);\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                setIsLoading(false);\r\n                console.log(error);\r\n            });\r\n    }, []);\r\n\r\n    /** Gets the authenticated student's follows and stores the follow id associated with this project */\r\n     useEffect(() => {\r\n        setIsLoading(true);\r\n        axiosInstance\r\n            .get(`api/follows/`)\r\n            .then(response => {\r\n                setIsLoading(false);\r\n                // check if the authenticated student is following this project\r\n                response.data.map(follow => {\r\n                    if (follow.project == id) {\r\n                        setFollowId(follow.id);\r\n                        setIsFollower(true);\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                setIsLoading(false);\r\n                console.log(error);\r\n            });\r\n    }, []);\r\n\r\n    /** Sets editing state for this project */\r\n    const handleEditProject = () => {\r\n        setIsEditing(true);\r\n    }\r\n\r\n    /** Take a membership id and deletes that membership associated with this project */\r\n    const handleRemoveMember = (membership_id) => {\r\n        if (isOwner) {\r\n            axiosInstance\r\n                .delete(`api/memberships/${membership_id}/`)\r\n                .then(response => {\r\n                    const new_members_list = []\r\n\r\n                    members.map(member => {\r\n                        if (member.id != membership_id) {\r\n                            new_members_list.push({...member});\r\n                        }\r\n                    });\r\n\r\n                    setMembers(new_members_list);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    /** Deletes this project */\r\n    const handleDeleteProject = () => {\r\n        // delete project and redirect\r\n        if (isOwner) {\r\n            axiosInstance\r\n                .delete(`api/projects/${id}/`)\r\n                .then(response => {\r\n                    history.push('/projects/active');\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    /** Deletes authenticated student's membership to this project. */\r\n    const handleLeaveProject = () => {\r\n        if (isMember) {\r\n            setIsLoading(true);\r\n\r\n            let memberId = 0;\r\n\r\n            project.team_members.map(member => {\r\n                if (member.user === authContext.studentId) {\r\n                    memberId = member.id;\r\n                }\r\n            });\r\n            axiosInstance\r\n                .delete(`api/memberships/${memberId}/`)\r\n                .then(response => {\r\n                    setIsLoading(false);\r\n                    setIsMember(false);\r\n\r\n                    const new_members_list = []\r\n\r\n                    members.map(member => {\r\n                        if (member.user != authContext.studentId) {\r\n                            new_members_list.push({...member});\r\n                        }\r\n                    });\r\n\r\n                    setMembers(new_members_list);\r\n                })\r\n                .catch(error => {\r\n                    setIsLoading(false);\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    /** Sets request status for the authenticate student to true */\r\n    const handleRequestSent = () => {\r\n        setHasActiveJoinRequest(true);\r\n    }\r\n\r\n    /** Adds authenticated student as the follower of this project */\r\n    const handleFollowProject = () => {\r\n        // add to student's followed projects and update state\r\n        if (isFollower === false) {\r\n            setIsLoading(true);\r\n\r\n            axiosInstance\r\n                .post(`api/follows/`, {\"project\": id})\r\n                .then(response => {\r\n                    setIsLoading(false);\r\n                    setFollowId(response.data.id);\r\n                    setIsFollower(true);\r\n                })\r\n                .catch(error => {\r\n                    setIsLoading(false);\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    /** Removes authenticated student as the follower of this project */\r\n    const handleUnfollowProject = () => {\r\n        // remove from student's followed projects and update state\r\n        if (isFollower) {\r\n            setIsLoading(true);\r\n\r\n            axiosInstance\r\n                .delete(`api/follows/${followId}/`)\r\n                .then(response => {\r\n                    setIsLoading(false);\r\n                    setFollowId(-1);\r\n                    setIsFollower(false);\r\n                })\r\n                .catch(error => {\r\n                    setIsLoading(false);\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    /** Updates project data and disables editing state */\r\n    const handleUpdateProject = (new_project_data) => {\r\n        setProject(new_project_data);\r\n        setIsEditing(false);\r\n    }\r\n\r\n    /** Sets project edit state to false */\r\n    const handleCancelUpdateProject = () => {\r\n        setIsEditing(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isEditing ?\r\n                <ProjectUpdate\r\n                    isOwner={isOwner}\r\n                    currentProjectData={project}\r\n                    handleUpdateProject={handleUpdateProject}\r\n                    handleCancelUpdateProject={handleCancelUpdateProject}\r\n                /> :\r\n                <ProjectView\r\n                    project={project}\r\n                    members={members}\r\n                    isOwner={isOwner}\r\n                    isMember={isMember}\r\n                    isFollower={isFollower}\r\n                    hasActiveJoinRequest={hasActiveJoinRequest}\r\n                    handleEditProject={handleEditProject}\r\n                    handleDeleteProject={handleDeleteProject}\r\n                    handleLeaveProject={handleLeaveProject}\r\n                    handleRequestSent={handleRequestSent}\r\n                    handleFollowProject={handleFollowProject}\r\n                    handleUnfollowProject={handleUnfollowProject}\r\n                    handleRemoveMember={handleRemoveMember}\r\n                /> \r\n            }\r\n            \r\n            <Backdrop className={classes.backdrop} open={isLoading}>\r\n                <CircularProgress color=\"secondary\" />\r\n            </Backdrop>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Project;","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectView.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectUpdate.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectCreate.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\notifications\\ProjectRequestsList.js",["138","139"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n/** my components */\r\nimport ProjectRequestCard from './ProjectRequestCard';\r\n/** my utilities */\r\nimport { axiosInstance } from '../../utilities/axios';\r\n/** Material UI Imports */\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n/** custom styles for this component */\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    card: {\r\n        padding: 20,\r\n        marginBottom: 25,\r\n    }\r\n}));\r\n\r\n\r\n/** Renders a list of project requests. */\r\nconst ProjectRequestsList = (props) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const classes = useStyles();\r\n    const [requests, setRequests] = useState([]);\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    /** Fetches and stores the authenticated student's active project requests. */\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n\r\n        axiosInstance\r\n            .get(`api/requests/`)\r\n            .then( response => {\r\n                setIsLoading(false);\r\n                setRequests(response.data);\r\n            })\r\n            .catch(error => {\r\n                setIsLoading(false);\r\n                console.log(error.response);\r\n            });\r\n    }, []);\r\n\r\n    /** Sets a new list of requests excluding the request with the given ID. */\r\n    const removeRequest = (requestId) => {\r\n        const new_requests_list = [];\r\n\r\n        requests.map(request => {\r\n            if (request.id != requestId) {\r\n                new_requests_list.push(request);\r\n            }\r\n        });\r\n\r\n        setRequests(new_requests_list);\r\n    };\r\n\r\n    /** Cancels a request with the given ID. */\r\n    const handleCancelRequest = (requestId) => {\r\n        axiosInstance\r\n            .put(`api/requests/${requestId}/`, {status: \"CNL\"})\r\n            .then(response => {\r\n                removeRequest(requestId);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n\r\n                if (error.response.status === 404) {\r\n                    history.push(`${location.pathname}/page-not-found`);\r\n                }\r\n            });\r\n    };\r\n\r\n    /** Declines a request with the given ID. */\r\n    const handleDeclineRequest = (requestId) => {\r\n        axiosInstance\r\n            .put(`api/requests/${requestId}/`, {status: \"DCN\"})\r\n            .then(response => {\r\n                removeRequest(requestId);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n\r\n                if (error.response.status === 404) {\r\n                    history.push(`${location.pathname}/page-not-found`);\r\n                }\r\n            });\r\n    };\r\n\r\n    /** Accepts a request with the given ID. */\r\n    const handleAcceptRequest = (requestId) => {\r\n        axiosInstance\r\n            .put(`api/requests/${requestId}/`, {status: \"ACP\"})\r\n            .then(response => {\r\n                removeRequest(requestId);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n\r\n                if (error.response.status === 404) {\r\n                    history.push(`${location.pathname}/page-not-found`);\r\n                }\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                <Card className={classes.card}>\r\n                    <CardContent>\r\n                        <Typography component=\"h1\" variant=\"h3\" gutterBottom>Your Project Requests</Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            }\r\n            <Grid container spacing={1} justify=\"flex-start\" data-cy=\"requests-container\">\r\n                {\r\n                    requests.map(request => {\r\n                        return (\r\n                            <Grid item key={request.id}>\r\n                                <ProjectRequestCard\r\n                                    requestId={request.id}\r\n                                    requester={request.requester}\r\n                                    requester_first_name={request.requester_first_name}\r\n                                    requester_last_name={request.requester_last_name}\r\n                                    requestee={request.requestee}\r\n                                    requestee_first_name={request.requestee_first_name}\r\n                                    requestee_last_name={request.requestee_last_name}\r\n                                    project={request.project}\r\n                                    projectTitle={request.project_title}\r\n                                    role={request.role}\r\n                                    handleCancelRequest={handleCancelRequest}\r\n                                    handleDeclineRequest={handleDeclineRequest}\r\n                                    handleAcceptRequest={handleAcceptRequest}\r\n                                />\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n            <Backdrop className={classes.backdrop} open={isLoading}>\r\n                <CircularProgress color=\"secondary\" />\r\n            </Backdrop>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectRequestsList;","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\notifications\\ProjectRequestCard.js",[],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectMemberDiscussion.js",["140"],"import React, { useState, useEffect } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n/** my components */\r\nimport ProjectMessageList from './ProjectMessageList';\r\nimport ProjectMessageForm from './ProjectMessageForm';\r\n/** my utilities */\r\nimport { axiosInstance } from '../../utilities/axios';\r\n\r\n\r\n/** Discussion form validation schema. */\r\nconst discussionFormValidationSchema = Yup.object().shape({\r\n    message: Yup.string()\r\n        .max(1000, 'This field must not contain more than 1000 characters'),\r\n});\r\n\r\n\r\n\r\n/** Renders the member discussion room for a given project ID */\r\nconst ProjectMemberDiscussion = (props) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [refreshMessages, setRefreshMessages] = useState(false);\r\n\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    /**\r\n     * Fetch and store the private messages for the given project id\r\n     * Redirects to a 404 page if the project doesn't exist.\r\n     */\r\n     useEffect(() => {\r\n        axiosInstance\r\n            .get(`api/projects/${props.projectId}/private-messages/`)\r\n            .then(response => {\r\n                setMessages(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n\r\n                if (error.response.status === 404) {\r\n                    history.push(`${location.pathname}/page-not-found`);\r\n                }\r\n            });\r\n    }, [refreshMessages]);\r\n\r\n    /** Activates flag for refreshing messages */\r\n    const handleRefreshMessages = () => {\r\n        setRefreshMessages(!refreshMessages);\r\n    }\r\n\r\n    /**\r\n     * Handles the submission for a member message.\r\n     * Updates error messages on fields if a 400 code is returned.\r\n     */\r\n     const handleMessageFormSubmit = async (values, actions) => {\r\n        axiosInstance\r\n            .post(`api/projects/${props.projectId}/private-messages/`, {\r\n                message: values.message,\r\n            })\r\n            .then(response => {\r\n                actions.resetForm();\r\n                handleRefreshMessages();\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 400) {\r\n                    actions.setFieldError('message', error.response.data.message);\r\n                } else {\r\n                    console.log(error.response);\r\n                }\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ProjectMessageList messages={messages} />\r\n            <ProjectMessageForm\r\n                discussionFormValidationSchema={discussionFormValidationSchema}\r\n                handleMessageFormSubmit={handleMessageFormSubmit}\r\n                handleRefreshMessages={handleRefreshMessages}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectMemberDiscussion;","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectPublicDiscussion.js",["141"],"import React, { useState, useEffect } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n/** my components */\r\nimport ProjectMessageList from './ProjectMessageList';\r\nimport ProjectMessageForm from './ProjectMessageForm';\r\n/** my utilities */\r\nimport { axiosInstance } from '../../utilities/axios';\r\n\r\n\r\n/** Discussion form validation schema. */\r\nconst discussionFormValidationSchema = Yup.object().shape({\r\n    message: Yup.string()\r\n        .max(1000, 'This field must not contain more than 1000 characters'),\r\n});\r\n\r\n\r\n/** Renders the public discussion room for a given project ID */\r\nconst ProjectPublicDiscussion = (props) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [refreshMessages, setRefreshMessages] = useState(false);\r\n\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    /**\r\n     * Fetch and store the public messages for the given project id\r\n     * Redirects to a 404 page if the project doesn't exist.\r\n     */\r\n     useEffect(() => {\r\n        axiosInstance\r\n            .get(`api/projects/${props.projectId}/public-messages/`)\r\n            .then(response => {\r\n                setMessages(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n\r\n                if (error.response.status === 404) {\r\n                    history.push(`${location.pathname}/page-not-found`);\r\n                }\r\n            });\r\n    }, [refreshMessages]);\r\n\r\n    /** Activates flag for refreshing messages */\r\n    const handleRefreshMessages = () => {\r\n        setRefreshMessages(!refreshMessages);\r\n    }\r\n\r\n    /**\r\n     * Handles the submission for a public message.\r\n     * Updates error messages on fields if a 400 code is returned.\r\n     */\r\n     const handleMessageFormSubmit = async (values, actions) => {\r\n        axiosInstance\r\n            .post(`api/projects/${props.projectId}/public-messages/`, {\r\n                message: values.message,\r\n            })\r\n            .then(response => {\r\n                actions.resetForm();\r\n                handleRefreshMessages();\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 400) {\r\n                    actions.setFieldError('message', error.response.data.message);\r\n                } else {\r\n                    console.log(error.response);\r\n                }\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ProjectMessageList messages={messages} />\r\n            <ProjectMessageForm\r\n                discussionFormValidationSchema={discussionFormValidationSchema}\r\n                handleMessageFormSubmit={handleMessageFormSubmit}\r\n                handleRefreshMessages={handleRefreshMessages}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectPublicDiscussion;","C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectMessageList.js",[],["142","143"],"C:\\Users\\Peyman\\Documents\\Birkbeck\\Repos\\FYP\\client\\src\\components\\projects\\ProjectMessageForm.js",[],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":2,"column":10,"nodeType":"150","messageId":"151","endLine":2,"endColumn":14},{"ruleId":"152","severity":1,"message":"153","line":108,"column":8,"nodeType":"154","endLine":108,"endColumn":10,"suggestions":"155"},{"ruleId":"152","severity":1,"message":"153","line":96,"column":8,"nodeType":"154","endLine":96,"endColumn":10,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":60,"column":64,"nodeType":"159","messageId":"160","endLine":60,"endColumn":66},{"ruleId":"157","severity":1,"message":"158","line":71,"column":60,"nodeType":"159","messageId":"160","endLine":71,"endColumn":62},{"ruleId":"152","severity":1,"message":"153","line":85,"column":8,"nodeType":"154","endLine":85,"endColumn":10,"suggestions":"161"},{"ruleId":"157","severity":1,"message":"158","line":98,"column":43,"nodeType":"159","messageId":"160","endLine":98,"endColumn":45},{"ruleId":"162","severity":1,"message":"163","line":99,"column":41,"nodeType":"164","messageId":"165","endLine":99,"endColumn":43},{"ruleId":"152","severity":1,"message":"166","line":108,"column":8,"nodeType":"154","endLine":108,"endColumn":10,"suggestions":"167"},{"ruleId":"157","severity":1,"message":"158","line":118,"column":42,"nodeType":"159","messageId":"160","endLine":118,"endColumn":44},{"ruleId":"162","severity":1,"message":"163","line":119,"column":40,"nodeType":"164","messageId":"165","endLine":119,"endColumn":42},{"ruleId":"152","severity":1,"message":"166","line":129,"column":8,"nodeType":"154","endLine":129,"endColumn":10,"suggestions":"168"},{"ruleId":"157","severity":1,"message":"158","line":144,"column":40,"nodeType":"159","messageId":"160","endLine":144,"endColumn":42},{"ruleId":"162","severity":1,"message":"169","line":145,"column":39,"nodeType":"164","messageId":"165","endLine":145,"endColumn":41},{"ruleId":"157","severity":1,"message":"158","line":180,"column":45,"nodeType":"159","messageId":"160","endLine":180,"endColumn":47},{"ruleId":"157","severity":1,"message":"158","line":193,"column":40,"nodeType":"159","messageId":"160","endLine":193,"endColumn":42},{"ruleId":"162","severity":1,"message":"169","line":194,"column":41,"nodeType":"164","messageId":"165","endLine":194,"endColumn":43},{"ruleId":"157","severity":1,"message":"158","line":58,"column":30,"nodeType":"159","messageId":"160","endLine":58,"endColumn":32},{"ruleId":"162","severity":1,"message":"169","line":59,"column":28,"nodeType":"164","messageId":"165","endLine":59,"endColumn":30},{"ruleId":"152","severity":1,"message":"170","line":44,"column":8,"nodeType":"154","endLine":44,"endColumn":25,"suggestions":"171"},{"ruleId":"152","severity":1,"message":"170","line":43,"column":8,"nodeType":"154","endLine":43,"endColumn":25,"suggestions":"172"},{"ruleId":"144","replacedBy":"173"},{"ruleId":"146","replacedBy":"174"},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authContext.studentId', 'history', 'id', and 'location.pathname'. Either include them or remove the dependency array.","ArrayExpression",["177"],["178"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["179"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["180"],["181"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'history', 'location.pathname', and 'props.projectId'. Either include them or remove the dependency array.",["182"],["183"],["175"],["176"],"no-global-assign","no-unsafe-negation",{"desc":"184","fix":"185"},{"desc":"184","fix":"186"},{"desc":"184","fix":"187"},{"desc":"188","fix":"189"},{"desc":"188","fix":"190"},{"desc":"191","fix":"192"},{"desc":"191","fix":"193"},"Update the dependencies array to be: [authContext.studentId, history, id, location.pathname]",{"range":"194","text":"195"},{"range":"196","text":"195"},{"range":"197","text":"195"},"Update the dependencies array to be: [id]",{"range":"198","text":"199"},{"range":"200","text":"199"},"Update the dependencies array to be: [history, location.pathname, props.projectId, refreshMessages]",{"range":"201","text":"202"},{"range":"203","text":"202"},[3902,3904],"[authContext.studentId, history, id, location.pathname]",[3469,3471],[3098,3100],[3787,3789],"[id]",[4545,4547],[1488,1505],"[history, location.pathname, props.projectId, refreshMessages]",[1484,1501]]